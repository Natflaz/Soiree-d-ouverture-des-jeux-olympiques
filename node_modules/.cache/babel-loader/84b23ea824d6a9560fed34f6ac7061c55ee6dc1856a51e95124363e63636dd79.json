{"ast":null,"code":"import { mapGetters, mapMutations } from 'vuex';\nexport default {\n  data() {\n    return {\n      selectedTypes: {}\n    };\n  },\n  computed: {\n    ...mapGetters(['getallPrestations', \"getallType\", 'filteredPrestations']),\n    filteredPrestations() {\n      if (Object.values(this.selectedTypes).every(v => !v)) {\n        //veut dire que la méthode vérifie si chaque valeur v est fausse en gros !v.\n        return this.getallPrestations;\n      }\n      return this.getallPrestations.filter(prestation => this.selectedTypes[prestation.id_type_prestation]);\n    }\n  },\n  methods: {\n    ...mapMutations(['SET_SELECTED_TYPE']),\n    getTypePrestation(idType) {\n      const typePrestationMap = this.$store.getters.getallType;\n      return typePrestationMap[idType];\n    },\n    getTypePrestationLabel(idType) {\n      const type = this.getallType.find(type => type.id_type_prestation === idType);\n      return type ? type.libelle : 'Type inconnu';\n    },\n    getImageSrc(imageName) {\n      try {\n        return require('@/assets/' + imageName);\n      } catch {\n        return require('@/assets/' + \"4.png\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","mapMutations","data","selectedTypes","computed","filteredPrestations","Object","values","every","v","getallPrestations","filter","prestation","id_type_prestation","methods","getTypePrestation","idType","typePrestationMap","$store","getters","getallType","getTypePrestationLabel","type","find","libelle","getImageSrc","imageName","require"],"sources":["src/components/ShopComponent.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-4\">\n    <h2>Liste des Prestations</h2>\n    <div class=\"form-check form-switch\"\n         v-for=\"typePrestation in getallType\"\n         :key=\"typePrestation.id_type_prestation\">\n      <input class=\"form-check-input\"\n             type=\"checkbox\"\n             v-model=\"selectedTypes[typePrestation.id_type_prestation]\"\n             :id=\"'flexSwitchCheck' + typePrestation.id_type_prestation\">\n      <label class=\"form-check-label\"\n             :for=\"'flexSwitchCheck' + typePrestation.id_type_prestation\">\n        {{ getTypePrestationLabel(typePrestation.id_type_prestation) }}\n      </label>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-4 mb-3\" v-for=\"prestation in filteredPrestations\" :key=\"prestation.id_prestation\">\n        <div class=\"card\">\n          <img :src=\"getImageSrc(prestation.image)\" class=\"card-img-top size\" alt=\"Image de la prestation\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ prestation.libelle }}</h5>\n            <p class=\"card-text\">Prix : {{ prestation.prix }}</p>\n            <p class=\"card-text\">Type : {{ getTypePrestationLabel(prestation.id_type_prestation) }}</p>\n            <p class=\"card-text\">Stand : {{ prestation.id_stand }}</p>\n            <p class=\"card-text\">Créneau : {{ prestation.creneau_horaire }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport { mapGetters, mapMutations } from 'vuex';\n\nexport default {\n  data() {\n    return {\n      selectedTypes: {}\n    };\n  },\n  computed: {\n    ...mapGetters(['getallPrestations', \"getallType\", 'filteredPrestations']),\n    filteredPrestations() {\n      if (Object.values(this.selectedTypes).every(v => !v)) { //veut dire que la méthode vérifie si chaque valeur v est fausse en gros !v.\n        return this.getallPrestations;\n      }\n      return this.getallPrestations.filter(prestation =>\n          this.selectedTypes[prestation.id_type_prestation]\n      );\n    }\n  },\n  methods: {\n    ...mapMutations(['SET_SELECTED_TYPE']),\n    getTypePrestation(idType) {\n      const typePrestationMap = this.$store.getters.getallType;\n      return typePrestationMap[idType];\n    },\n    getTypePrestationLabel(idType) {\n      const type = this.getallType.find(type => type.id_type_prestation === idType);\n      return type ? type.libelle : 'Type inconnu';\n    },\n    getImageSrc(imageName) {\n      try {\n        return require('@/assets/' + imageName);\n      } catch {\n        return require('@/assets/' + \"4.png\");\n      }\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n\n.size{\n  height: 300px;\n}\n\n</style>"],"mappings":"AAiCA,SAAAA,UAAA,EAAAC,YAAA;AAEA;EACAC,KAAA;IACA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAJ,UAAA;IACAK,oBAAA;MACA,IAAAC,MAAA,CAAAC,MAAA,MAAAJ,aAAA,EAAAK,KAAA,CAAAC,CAAA,KAAAA,CAAA;QAAA;QACA,YAAAC,iBAAA;MACA;MACA,YAAAA,iBAAA,CAAAC,MAAA,CAAAC,UAAA,IACA,KAAAT,aAAA,CAAAS,UAAA,CAAAC,kBAAA,CACA;IACA;EACA;EACAC,OAAA;IACA,GAAAb,YAAA;IACAc,kBAAAC,MAAA;MACA,MAAAC,iBAAA,QAAAC,MAAA,CAAAC,OAAA,CAAAC,UAAA;MACA,OAAAH,iBAAA,CAAAD,MAAA;IACA;IACAK,uBAAAL,MAAA;MACA,MAAAM,IAAA,QAAAF,UAAA,CAAAG,IAAA,CAAAD,IAAA,IAAAA,IAAA,CAAAT,kBAAA,KAAAG,MAAA;MACA,OAAAM,IAAA,GAAAA,IAAA,CAAAE,OAAA;IACA;IACAC,YAAAC,SAAA;MACA;QACA,OAAAC,OAAA,eAAAD,SAAA;MACA;QACA,OAAAC,OAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}