{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport L from 'leaflet';\nexport default {\n  props: {\n    areas: {\n      type: Array,\n      required: true\n    },\n    showZoneList: {\n      type: Array\n    },\n    showPrestationList: {\n      type: Array\n    }\n  },\n  data() {\n    return {\n      map: null,\n      polygons: [] // Stockez les références des polygones pour pouvoir les supprimer\n    };\n  },\n\n  mounted() {\n    this.initializeMap();\n  },\n  methods: {\n    initializeMap() {\n      // Créez la carte et ajoutez la couche de tuiles\n      this.map = L.map('map').setView([48.857572, 2.2977709], 13);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      }).addTo(this.map);\n\n      // Créez les polygones pour chaque zone\n      this.areas.forEach(zone => {\n        const polygon = L.polygon(zone.coordinates, {\n          color: 'blue',\n          fillOpacity: 0.5\n        }).addTo(this.map);\n        polygon.on('click', () => {\n          this.showZoneInfo(zone);\n        });\n        this.polygons.push(polygon);\n      });\n    },\n    showZoneInfo(zone) {\n      // Affichez les informations de la zone, par exemple, en utilisant une boîte de dialogue modale\n      alert(`ID: ${zone.id} Zone: ${zone.zone}\\nSurface Area: ${zone.surface_area}\\nStand: ${zone.nom}\\nDescription: ${zone.description}`);\n    },\n    updateMap() {\n      // Supprimez les polygones actuels de la carte\n      this.polygons.forEach(polygon => {\n        this.map.removeLayer(polygon);\n      });\n      console.log(\"coucou\");\n\n      // Filtrer les zones à afficher en fonction des sélections\n      const filteredAreas = this.areas.filter(zone => {\n        return this.showZoneList.includes(zone.id_zone) && zone.id_prestation.some(id => this.showPrestationList.includes(id));\n      });\n\n      // Ajoutez à nouveau les polygones filtrés à la carte\n      filteredAreas.forEach(zone => {\n        const polygon = L.polygon(zone.coordinates, {\n          color: 'blue',\n          fillOpacity: 0.5\n        }).addTo(this.map);\n        polygon.on('click', () => {\n          this.showZoneInfo(zone);\n        });\n        this.polygons.push(polygon);\n      });\n    }\n  },\n  watch: {\n    // Surveillez les changements dans les tableaux selectedZones et selectedTypePrestations\n    selectedZones: 'updateMap',\n    selectedTypePrestations: 'updateMap'\n  }\n};","map":{"version":3,"names":["L","props","areas","type","Array","required","showZoneList","showPrestationList","data","map","polygons","mounted","initializeMap","methods","setView","tileLayer","attribution","addTo","forEach","zone","polygon","coordinates","color","fillOpacity","on","showZoneInfo","push","alert","id","surface_area","nom","description","updateMap","removeLayer","console","log","filteredAreas","filter","includes","id_zone","id_prestation","some","watch","selectedZones","selectedTypePrestations"],"sources":["src/components/Map/MapZone.vue"],"sourcesContent":["<template>\n  <div class=\"map-container\">\n    <div id=\"map\"></div>\n  </div>\n</template>\n\n<script>\nimport L from 'leaflet';\n\nexport default {\n  props: {\n    areas: {\n      type: Array,\n      required: true\n    },\n    showZoneList: {type: Array},\n    showPrestationList: {type: Array}\n\n  },\n  data() {\n    return {\n      map: null,\n      polygons: [] // Stockez les références des polygones pour pouvoir les supprimer\n    };\n  },\n  mounted() {\n    this.initializeMap();\n  },\n  methods: {\n    initializeMap() {\n      // Créez la carte et ajoutez la couche de tuiles\n      this.map = L.map('map').setView([48.857572, 2.2977709], 13);\n\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      }).addTo(this.map);\n\n      // Créez les polygones pour chaque zone\n      this.areas.forEach(zone => {\n        const polygon = L.polygon(zone.coordinates, {\n          color: 'blue',\n          fillOpacity: 0.5\n        }).addTo(this.map);\n\n        polygon.on('click', () => {\n          this.showZoneInfo(zone);\n        });\n\n        this.polygons.push(polygon);\n      });\n    },\n    showZoneInfo(zone) {\n      // Affichez les informations de la zone, par exemple, en utilisant une boîte de dialogue modale\n      alert(`ID: ${zone.id} Zone: ${zone.zone}\\nSurface Area: ${zone.surface_area}\\nStand: ${zone.nom}\\nDescription: ${zone.description}`);\n    },\n\n    updateMap() {\n      // Supprimez les polygones actuels de la carte\n      this.polygons.forEach(polygon => {\n        this.map.removeLayer(polygon);\n      });\n      console.log(\"coucou\")\n\n      // Filtrer les zones à afficher en fonction des sélections\n      const filteredAreas = this.areas.filter(zone => {\n        return (\n            this.showZoneList.includes(zone.id_zone) &&\n            zone.id_prestation.some(id => this.showPrestationList.includes(id))\n        );\n      });\n\n    // Ajoutez à nouveau les polygones filtrés à la carte\n    filteredAreas.forEach(zone => {\n      const polygon = L.polygon(zone.coordinates, {\n        color: 'blue',\n        fillOpacity: 0.5\n      }).addTo(this.map);\n\n      polygon.on('click', () => {\n        this.showZoneInfo(zone);\n      });\n\n      this.polygons.push(polygon);\n    });\n  }\n\n  },\n  watch: {\n    // Surveillez les changements dans les tableaux selectedZones et selectedTypePrestations\n    selectedZones: 'updateMap',\n    selectedTypePrestations: 'updateMap'\n  },\n\n};\n</script>\n\n<style scoped>\n.map-container {\n  width: 100%;\n  height: 100%;\n}\n#map {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"mappings":";AAOA,OAAAA,CAAA;AAEA;EACAC,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;IACAC,YAAA;MAAAH,IAAA,EAAAC;IAAA;IACAG,kBAAA;MAAAJ,IAAA,EAAAC;IAAA;EAEA;EACAI,KAAA;IACA;MACAC,GAAA;MACAC,QAAA;IACA;EACA;;EACAC,QAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACAD,cAAA;MACA;MACA,KAAAH,GAAA,GAAAT,CAAA,CAAAS,GAAA,QAAAK,OAAA;MAEAd,CAAA,CAAAe,SAAA;QACAC,WAAA;MACA,GAAAC,KAAA,MAAAR,GAAA;;MAEA;MACA,KAAAP,KAAA,CAAAgB,OAAA,CAAAC,IAAA;QACA,MAAAC,OAAA,GAAApB,CAAA,CAAAoB,OAAA,CAAAD,IAAA,CAAAE,WAAA;UACAC,KAAA;UACAC,WAAA;QACA,GAAAN,KAAA,MAAAR,GAAA;QAEAW,OAAA,CAAAI,EAAA;UACA,KAAAC,YAAA,CAAAN,IAAA;QACA;QAEA,KAAAT,QAAA,CAAAgB,IAAA,CAAAN,OAAA;MACA;IACA;IACAK,aAAAN,IAAA;MACA;MACAQ,KAAA,QAAAR,IAAA,CAAAS,EAAA,UAAAT,IAAA,CAAAA,IAAA,mBAAAA,IAAA,CAAAU,YAAA,YAAAV,IAAA,CAAAW,GAAA,kBAAAX,IAAA,CAAAY,WAAA;IACA;IAEAC,UAAA;MACA;MACA,KAAAtB,QAAA,CAAAQ,OAAA,CAAAE,OAAA;QACA,KAAAX,GAAA,CAAAwB,WAAA,CAAAb,OAAA;MACA;MACAc,OAAA,CAAAC,GAAA;;MAEA;MACA,MAAAC,aAAA,QAAAlC,KAAA,CAAAmC,MAAA,CAAAlB,IAAA;QACA,OACA,KAAAb,YAAA,CAAAgC,QAAA,CAAAnB,IAAA,CAAAoB,OAAA,KACApB,IAAA,CAAAqB,aAAA,CAAAC,IAAA,CAAAb,EAAA,SAAArB,kBAAA,CAAA+B,QAAA,CAAAV,EAAA;MAEA;;MAEA;MACAQ,aAAA,CAAAlB,OAAA,CAAAC,IAAA;QACA,MAAAC,OAAA,GAAApB,CAAA,CAAAoB,OAAA,CAAAD,IAAA,CAAAE,WAAA;UACAC,KAAA;UACAC,WAAA;QACA,GAAAN,KAAA,MAAAR,GAAA;QAEAW,OAAA,CAAAI,EAAA;UACA,KAAAC,YAAA,CAAAN,IAAA;QACA;QAEA,KAAAT,QAAA,CAAAgB,IAAA,CAAAN,OAAA;MACA;IACA;EAEA;EACAsB,KAAA;IACA;IACAC,aAAA;IACAC,uBAAA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}